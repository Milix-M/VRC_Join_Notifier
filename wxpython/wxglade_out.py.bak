#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Thu Jul 14 23:35:54 2022
#

import wx

# begin wxGlade: dependencies
import wx.adv
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((865, 548))
        self.SetTitle(u"VRChat Join通知システム")
        self.SetBackgroundColour(wx.Colour(255, 255, 255))

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.frame_menubar.Append(wxglade_tmp_menu, u"設定")
        wxglade_tmp_menu = wx.Menu()
        self.frame_menubar.Append(wxglade_tmp_menu, u"このアプリについて")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, u"VRChat Join通知システム", style=wx.ST_ELLIPSIZE_END)
        label_1.SetMinSize((-1, 45))
        label_1.SetFont(wx.Font(20, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 0)

        self.text_ctrl_1 = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_READONLY)
        self.text_ctrl_1.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        # end wxGlade

# end of class MyFrame

class MyFrame1(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLOSE_BOX
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((575, 364))
        self.SetTitle(u"環境設定")
        self.SetBackgroundColour(wx.Colour(255, 255, 255))

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.GridSizer(8, 2, 0, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        self.text_ctrl_1 = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        grid_sizer_1.Add(self.text_ctrl_1, 0, wx.ALL, 5)

        label_11 = wx.StaticText(self.panel_1, wx.ID_ANY, u"ログ更新間隔(ms)")
        grid_sizer_1.Add(label_11, 0, wx.ALL, 5)

        self.checkbox_7 = wx.CheckBox(self.panel_1, wx.ID_ANY, u"XSOvelayでログを表示")
        grid_sizer_1.Add(self.checkbox_7, 0, wx.ALL, 5)

        label_8 = wx.StaticText(self.panel_1, wx.ID_ANY, u"XSOverlayの機能を使用して\nログをオーバーレイ表示します")
        grid_sizer_1.Add(label_8, 0, wx.ALL, 5)

        self.checkbox_8 = wx.CheckBox(self.panel_1, wx.ID_ANY, u"ログをバックアップ")
        grid_sizer_1.Add(self.checkbox_8, 0, wx.ALL, 5)

        label_9 = wx.StaticText(self.panel_1, wx.ID_ANY, u".txt形式でログをバックアップします")
        grid_sizer_1.Add(label_9, 0, wx.ALL, 5)

        self.checkbox_9 = wx.CheckBox(self.panel_1, wx.ID_ANY, u"起動時にログを復元する")
        grid_sizer_1.Add(self.checkbox_9, 0, wx.ALL, 5)

        label_10 = wx.StaticText(self.panel_1, wx.ID_ANY, u"起動時にバックアップファイルを使用してログを復元します\nログバックアップの有効化が必要です")
        grid_sizer_1.Add(label_10, 0, wx.ALL, 5)

        self.checkbox_10 = wx.CheckBox(self.panel_1, wx.ID_ANY, u"ワールド移動時にログを区切る")
        grid_sizer_1.Add(self.checkbox_10, 0, wx.ALL, 5)

        label_12 = wx.StaticText(self.panel_1, wx.ID_ANY, u"ワールド移動時にログに区切りを挿入します。")
        grid_sizer_1.Add(label_12, 0, wx.ALL, 5)

        self.checkbox_11 = wx.CheckBox(self.panel_1, wx.ID_ANY, u"タスクトレイに最小化")
        grid_sizer_1.Add(self.checkbox_11, 0, wx.ALL, 5)

        label_13 = wx.StaticText(self.panel_1, wx.ID_ANY, u"ウィンドウを閉じた時にタスクトレイに最小化します")
        grid_sizer_1.Add(label_13, 0, wx.ALL, 5)

        self.checkbox_12 = wx.CheckBox(self.panel_1, wx.ID_ANY, u"最小化した状態で起動")
        grid_sizer_1.Add(self.checkbox_12, 0, wx.ALL, 5)

        label_14 = wx.StaticText(self.panel_1, wx.ID_ANY, u"タスクトレイに最小化した状態でアプリを起動します")
        grid_sizer_1.Add(label_14, 0, wx.ALL, 5)

        self.checkbox_13 = wx.CheckBox(self.panel_1, wx.ID_ANY, u"Leaveログを表示する")
        grid_sizer_1.Add(self.checkbox_13, 0, wx.ALL, 5)

        label_15 = wx.StaticText(self.panel_1, wx.ID_ANY, u"Leaveログを表示します。")
        grid_sizer_1.Add(label_15, 0, wx.ALL, 5)

        self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, u"保存")
        sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.LEFT | wx.RIGHT, 5)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        # end wxGlade

# end of class MyFrame1

class MyFrame2(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame2.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((277, 169))
        self.SetTitle(u"このアプリについて")
        self.SetBackgroundColour(wx.Colour(255, 255, 255))

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, u"VRChat Join通知システム")
        label_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Ver:x.x.x")
        label_2.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(label_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.hyperlink_1 = wx.adv.HyperlinkCtrl(self.panel_1, wx.ID_ANY, "Booth", "https://reoshop.booth.pm/items/3757293")
        sizer_3.Add(self.hyperlink_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.LEFT | wx.RIGHT | wx.TOP, 15)

        self.hyperlink_2 = wx.adv.HyperlinkCtrl(self.panel_1, wx.ID_ANY, u"作者:ReoSteldam", "")
        sizer_3.Add(self.hyperlink_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        grid_sizer_1 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_1, 0, wx.EXPAND, 0)

        self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, u"アップデートを確認")
        grid_sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER | wx.ALL, 10)

        self.button_2 = wx.Button(self.panel_1, wx.ID_ANY, "OK")
        grid_sizer_1.Add(self.button_2, 0, wx.ALIGN_CENTER | wx.ALL, 10)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        # end wxGlade

# end of class MyFrame2

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
